// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/datasource/converters.go

// Package mock_datasource is a generated GoMock package.
package mock_datasource

import (
	gomock "github.com/golang/mock/gomock"
	datasource "github.com/grafana/kairosdb-datasource/pkg/datasource"
	remote "github.com/grafana/kairosdb-datasource/pkg/remote"
	reflect "reflect"
)

// MockMetricQueryConverter is a mock of MetricQueryConverter interface
type MockMetricQueryConverter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricQueryConverterMockRecorder
}

// MockMetricQueryConverterMockRecorder is the mock recorder for MockMetricQueryConverter
type MockMetricQueryConverterMockRecorder struct {
	mock *MockMetricQueryConverter
}

// NewMockMetricQueryConverter creates a new mock instance
func NewMockMetricQueryConverter(ctrl *gomock.Controller) *MockMetricQueryConverter {
	mock := &MockMetricQueryConverter{ctrl: ctrl}
	mock.recorder = &MockMetricQueryConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricQueryConverter) EXPECT() *MockMetricQueryConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockMetricQueryConverter) Convert(query *datasource.MetricQuery) (*remote.MetricQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", query)
	ret0, _ := ret[0].(*remote.MetricQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockMetricQueryConverterMockRecorder) Convert(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockMetricQueryConverter)(nil).Convert), query)
}

// MockGroupByConverter is a mock of GroupByConverter interface
type MockGroupByConverter struct {
	ctrl     *gomock.Controller
	recorder *MockGroupByConverterMockRecorder
}

// MockGroupByConverterMockRecorder is the mock recorder for MockGroupByConverter
type MockGroupByConverterMockRecorder struct {
	mock *MockGroupByConverter
}

// NewMockGroupByConverter creates a new mock instance
func NewMockGroupByConverter(ctrl *gomock.Controller) *MockGroupByConverter {
	mock := &MockGroupByConverter{ctrl: ctrl}
	mock.recorder = &MockGroupByConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupByConverter) EXPECT() *MockGroupByConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockGroupByConverter) Convert(groupBy *datasource.GroupBy) ([]*remote.Grouper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", groupBy)
	ret0, _ := ret[0].([]*remote.Grouper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockGroupByConverterMockRecorder) Convert(groupBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockGroupByConverter)(nil).Convert), groupBy)
}

// MockAggregatorConverter is a mock of AggregatorConverter interface
type MockAggregatorConverter struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorConverterMockRecorder
}

// MockAggregatorConverterMockRecorder is the mock recorder for MockAggregatorConverter
type MockAggregatorConverterMockRecorder struct {
	mock *MockAggregatorConverter
}

// NewMockAggregatorConverter creates a new mock instance
func NewMockAggregatorConverter(ctrl *gomock.Controller) *MockAggregatorConverter {
	mock := &MockAggregatorConverter{ctrl: ctrl}
	mock.recorder = &MockAggregatorConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregatorConverter) EXPECT() *MockAggregatorConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockAggregatorConverter) Convert(aggregator *datasource.Aggregator) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", aggregator)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockAggregatorConverterMockRecorder) Convert(aggregator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockAggregatorConverter)(nil).Convert), aggregator)
}

// MockParameterConverter is a mock of ParameterConverter interface
type MockParameterConverter struct {
	ctrl     *gomock.Controller
	recorder *MockParameterConverterMockRecorder
}

// MockParameterConverterMockRecorder is the mock recorder for MockParameterConverter
type MockParameterConverterMockRecorder struct {
	mock *MockParameterConverter
}

// NewMockParameterConverter creates a new mock instance
func NewMockParameterConverter(ctrl *gomock.Controller) *MockParameterConverter {
	mock := &MockParameterConverter{ctrl: ctrl}
	mock.recorder = &MockParameterConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParameterConverter) EXPECT() *MockParameterConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockParameterConverter) Convert(param *datasource.AggregatorParameter) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", param)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockParameterConverterMockRecorder) Convert(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockParameterConverter)(nil).Convert), param)
}
