// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/datasource/datasource.go

// Package mock_datasource is a generated GoMock package.
package mock_datasource

import (
	gomock "github.com/golang/mock/gomock"
	datasource "github.com/grafana/grafana_plugin_model/go/datasource"
	remote "github.com/zsabin/kairosdb-datasource/pkg/remote"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockKairosDBClient is a mock of KairosDBClient interface
type MockKairosDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockKairosDBClientMockRecorder
}

// MockKairosDBClientMockRecorder is the mock recorder for MockKairosDBClient
type MockKairosDBClientMockRecorder struct {
	mock *MockKairosDBClient
}

// NewMockKairosDBClient creates a new mock instance
func NewMockKairosDBClient(ctrl *gomock.Controller) *MockKairosDBClient {
	mock := &MockKairosDBClient{ctrl: ctrl}
	mock.recorder = &MockKairosDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKairosDBClient) EXPECT() *MockKairosDBClientMockRecorder {
	return m.recorder
}

// QueryMetrics mocks base method
func (m *MockKairosDBClient) QueryMetrics(ctx context.Context, dsInfo *datasource.DatasourceInfo, request *remote.MetricQueryRequest) ([]*remote.MetricQueryResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMetrics", ctx, dsInfo, request)
	ret0, _ := ret[0].([]*remote.MetricQueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMetrics indicates an expected call of QueryMetrics
func (mr *MockKairosDBClientMockRecorder) QueryMetrics(ctx, dsInfo, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMetrics", reflect.TypeOf((*MockKairosDBClient)(nil).QueryMetrics), ctx, dsInfo, request)
}
